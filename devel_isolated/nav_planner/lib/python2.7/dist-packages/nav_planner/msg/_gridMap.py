# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nav_planner/gridMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nav_planner.msg

class gridMap(genpy.Message):
  _md5sum = "1e2dc952130c008ed024ffc4c0c5cfad"
  _type = "nav_planner/gridMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """gridRow[] grid
pointData[] path
int16 pathLength
================================================================================
MSG: nav_planner/gridRow
gridPoint[] row

================================================================================
MSG: nav_planner/gridPoint
int8 init
int8 proc
int8 disc
================================================================================
MSG: nav_planner/pointData
float32 x
float32 y
float32 z
"""
  __slots__ = ['grid','path','pathLength']
  _slot_types = ['nav_planner/gridRow[]','nav_planner/pointData[]','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grid,path,pathLength

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gridMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.grid is None:
        self.grid = []
      if self.path is None:
        self.path = []
      if self.pathLength is None:
        self.pathLength = 0
    else:
      self.grid = []
      self.path = []
      self.pathLength = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.grid)
      buff.write(_struct_I.pack(length))
      for val1 in self.grid:
        length = len(val1.row)
        buff.write(_struct_I.pack(length))
        for val2 in val1.row:
          _x = val2
          buff.write(_get_struct_3b().pack(_x.init, _x.proc, _x.disc))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_h().pack(self.pathLength))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.grid is None:
        self.grid = None
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grid = []
      for i in range(0, length):
        val1 = nav_planner.msg.gridRow()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.row = []
        for i in range(0, length):
          val2 = nav_planner.msg.gridPoint()
          _x = val2
          start = end
          end += 3
          (_x.init, _x.proc, _x.disc,) = _get_struct_3b().unpack(str[start:end])
          val1.row.append(val2)
        self.grid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = nav_planner.msg.pointData()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.path.append(val1)
      start = end
      end += 2
      (self.pathLength,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.grid)
      buff.write(_struct_I.pack(length))
      for val1 in self.grid:
        length = len(val1.row)
        buff.write(_struct_I.pack(length))
        for val2 in val1.row:
          _x = val2
          buff.write(_get_struct_3b().pack(_x.init, _x.proc, _x.disc))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_h().pack(self.pathLength))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.grid is None:
        self.grid = None
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grid = []
      for i in range(0, length):
        val1 = nav_planner.msg.gridRow()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.row = []
        for i in range(0, length):
          val2 = nav_planner.msg.gridPoint()
          _x = val2
          start = end
          end += 3
          (_x.init, _x.proc, _x.disc,) = _get_struct_3b().unpack(str[start:end])
          val1.row.append(val2)
        self.grid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = nav_planner.msg.pointData()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.path.append(val1)
      start = end
      end += 2
      (self.pathLength,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3b = None
def _get_struct_3b():
    global _struct_3b
    if _struct_3b is None:
        _struct_3b = struct.Struct("<3b")
    return _struct_3b
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
